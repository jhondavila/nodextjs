Ext.data.JsonP.Ext_app_EventDomain({"tagname":"class","name":"Ext.app.EventDomain","autodetected":{},"files":[{"filename":"EventDomain.js","href":"EventDomain.html#Ext-app-EventDomain"}],"members":[{"name":"idProperty","tagname":"cfg","owner":"Ext.app.EventDomain","id":"cfg-idProperty","meta":{}},{"name":"instances","tagname":"property","owner":"Ext.app.EventDomain","id":"property-instances","meta":{}},{"name":"dispatch","tagname":"method","owner":"Ext.app.EventDomain","id":"method-dispatch","meta":{"private":true}},{"name":"listen","tagname":"method","owner":"Ext.app.EventDomain","id":"method-listen","meta":{"private":true}},{"name":"match","tagname":"method","owner":"Ext.app.EventDomain","id":"method-match","meta":{"protected":true}},{"name":"monitor","tagname":"method","owner":"Ext.app.EventDomain","id":"method-monitor","meta":{"protected":true}},{"name":"unlisten","tagname":"method","owner":"Ext.app.EventDomain","id":"method-unlisten","meta":{"private":true}}],"alternateClassNames":[],"aliases":{},"id":"class-Ext.app.EventDomain","short_doc":"This class is a base class for an event domain. ...","component":false,"superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/EventDomain.html#Ext-app-EventDomain' target='_blank'>EventDomain.js</a></div></pre><div class='doc-contents'><p>This class is a base class for an event domain. In the context of MVC, an \"event domain\"\nis one or more base classes that fire events to which a Controller wants to listen. A\ncontroller listens to events by describing the selectors for events of interest to it.</p>\n\n<p>Matching selectors to the firer of an event is one key aspect that defines an event\ndomain. All event domain instances must provide a <code>match</code> method that tests selectors\nagainst the event firer.</p>\n\n<p>When an event domain instance is created (typically as a <code>singleton</code>), its <code>type</code>\nproperty is used to catalog the domain in the\n<a href=\"#!/api/Ext.app.EventDomain-property-instances\" rel=\"Ext.app.EventDomain-property-instances\" class=\"docClass\">Ext.app.EventDomain.instances</a> map.</p>\n\n<p>There are five event domains provided by default:</p>\n\n<ul>\n<li>Ext.app.domain.Component Component domain. This is the primary event domain that\nhas been available since Ext JS MVC was introduced. This domain is defined as any class that\nextends Ext.Component, where the selectors use\nExt.ComponentQuery#query Ext.ComponentQuery.</li>\n<li>Ext.app.domain.Global Global domain. This domain provides Controllers with access\nto events fired from Ext.GlobalEvents Observable instance. These events represent\nthe state of the application as a whole, and are always anonymous. Because of this, Global\ndomain does not provide selectors at all.</li>\n<li>Ext.app.domain.Controller Controller domain. This domain includes all classes\nthat extend Ext.app.Controller. Events fired by Controllers will be available\nwithin this domain; selectors are either Controller's Ext.app.Controller#id id or\n'*' wildcard for any Controller.</li>\n<li>Ext.app.domain.Store Store domain. This domain is for classes extending\nExt.data.AbstractStore. Selectors are either Store's\nExt.data.AbstractStore#storeId storeId or '*' wildcard for any Store.</li>\n<li>Ext.app.domain.Direct Direct domain. This domain includes all classes that extend\nExt.direct.Provider. Selectors are either Provider's Ext.direct.Provider#id id\nor '*' wildcard for any Provider. This domain is optional and will be loaded only if\nExt.direct.Manager singleton is required in your application.</li>\n</ul>\n\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-cfg'>Config options</h3><div class='subsection'><div id='cfg-idProperty' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Ext.app.EventDomain'>Ext.app.EventDomain</span><br/><a href='source/EventDomain.html#Ext-app-EventDomain-cfg-idProperty' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Ext.app.EventDomain-cfg-idProperty' class='name expandable'>idProperty</a> : <a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a><span class=\"signature\"></span></div><div class='description'><div class='short'><p>Name of the identifier property for this event domain.</p>\n</div><div class='long'><p>Name of the identifier property for this event domain.</p>\n</div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-instances' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Ext.app.EventDomain'>Ext.app.EventDomain</span><br/><a href='source/EventDomain.html#Ext-app-EventDomain-property-instances' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Ext.app.EventDomain-property-instances' class='name expandable'>instances</a> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a><span class=\"signature\"></span></div><div class='description'><div class='short'>An object map containing Ext.app.EventDomain instances keyed by the value\nof their type property. ...</div><div class='long'><p>An object map containing <code><a href=\"#!/api/Ext.app.EventDomain\" rel=\"Ext.app.EventDomain\" class=\"docClass\">Ext.app.EventDomain</a></code> instances keyed by the value\nof their <code>type</code> property.</p>\n<p>Defaults to: <code>{}</code></p></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-dispatch' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Ext.app.EventDomain'>Ext.app.EventDomain</span><br/><a href='source/EventDomain.html#Ext-app-EventDomain-method-dispatch' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Ext.app.EventDomain-method-dispatch' class='name expandable'>dispatch</a>( <span class='pre'>target, ev, args</span> ) : <a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">Boolean</a><span class=\"signature\"><span class='private' >private</span></span></div><div class='description'><div class='short'>This method dispatches an event fired by an object monitored by this domain. ...</div><div class='long'><p>This method dispatches an event fired by an object monitored by this domain. This\nis not called directly but is called by interceptors injected by the <code>monitor</code> method.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>target</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a><div class='sub-desc'><p>The firer of the event.</p>\n</div></li><li><span class='pre'>ev</span> : <a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a><div class='sub-desc'><p>The event being fired.</p>\n</div></li><li><span class='pre'>args</span> : <a href=\"#!/api/Array\" rel=\"Array\" class=\"docClass\">Array</a><div class='sub-desc'><p>The arguments for the event. This array <strong>does not</strong> include the event name.\nThat has already been sliced off because this class intercepts the <a href=\"#!/api/Ext.util.Observable-method-fireEventArgs\" rel=\"Ext.util.Observable-method-fireEventArgs\" class=\"docClass\">fireEventArgs</a>\nmethod which takes an array as the event's argument list.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">Boolean</a></span><div class='sub-desc'><p><code>false</code> if any listener returned <code>false</code>, otherwise <code>true</code>.</p>\n</div></li></ul></div></div></div><div id='method-listen' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Ext.app.EventDomain'>Ext.app.EventDomain</span><br/><a href='source/EventDomain.html#Ext-app-EventDomain-method-listen' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Ext.app.EventDomain-method-listen' class='name expandable'>listen</a>( <span class='pre'>selectors</span> )<span class=\"signature\"><span class='private' >private</span></span></div><div class='description'><div class='short'>This method adds listeners on behalf of a controller. ...</div><div class='long'><p>This method adds listeners on behalf of a controller. This method is passed an\nobject that is keyed by selectors. The value of these is also an object but now\nkeyed by event name. For example:</p>\n\n<pre><code> domain.listen({\n     'some[selector]': {\n         click: function() { ... }\n     },\n\n     'other selector': {\n         change: {\n             fn: function() { ... },\n             delay: 10\n         }\n     }\n\n }, controller);\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>selectors</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a><div class='sub-desc'><p>Config object containing selectors and listeners.</p>\n</div></li></ul></div></div></div><div id='method-match' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Ext.app.EventDomain'>Ext.app.EventDomain</span><br/><a href='source/EventDomain.html#Ext-app-EventDomain-method-match' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Ext.app.EventDomain-method-match' class='name expandable'>match</a>( <span class='pre'>target, selector</span> ) : <a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">Boolean</a><span class=\"signature\"><span class='protected' >protected</span></span></div><div class='description'><div class='short'>This method matches the firer of the event (the target) to the given selector. ...</div><div class='long'><p>This method matches the firer of the event (the <code>target</code>) to the given <code>selector</code>.\nDefault matching is very simple: a match is true when selector equals target's\n<a href=\"#!/api/Ext.app.EventDomain-cfg-idProperty\" rel=\"Ext.app.EventDomain-cfg-idProperty\" class=\"docClass\">idProperty</a>, or when selector is '*' wildcard to match any\ntarget.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>target</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a><div class='sub-desc'><p>The firer of the event.</p>\n</div></li><li><span class='pre'>selector</span> : <a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a><div class='sub-desc'><p>The selector to which to match the <code>target</code>.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">Boolean</a></span><div class='sub-desc'><p><code>true</code> if the <code>target</code> matches the <code>selector</code>.</p>\n</div></li></ul></div></div></div><div id='method-monitor' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Ext.app.EventDomain'>Ext.app.EventDomain</span><br/><a href='source/EventDomain.html#Ext-app-EventDomain-method-monitor' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Ext.app.EventDomain-method-monitor' class='name expandable'>monitor</a>( <span class='pre'>observable</span> )<span class=\"signature\"><span class='protected' >protected</span></span></div><div class='description'><div class='short'>This method is called by the derived class to monitor fireEvent calls. ...</div><div class='long'><p>This method is called by the derived class to monitor <code>fireEvent</code> calls. Any call\nto <code>fireEvent</code> on the target Observable will be intercepted and dispatched to any\nlistening Controllers. Assuming the original <code>fireEvent</code> method does not return\n<code>false</code>, the event is passed to the <code>dispatch</code> method of this object.</p>\n\n<p>This is typically called in the <code>constructor</code> of derived classes.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>observable</span> : <a href=\"#!/api/Ext.Class\" rel=\"Ext.Class\" class=\"docClass\">Ext.Class</a><div class='sub-desc'><p>The Observable to monitor for events.</p>\n</div></li></ul></div></div></div><div id='method-unlisten' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Ext.app.EventDomain'>Ext.app.EventDomain</span><br/><a href='source/EventDomain.html#Ext-app-EventDomain-method-unlisten' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Ext.app.EventDomain-method-unlisten' class='name expandable'>unlisten</a>( <span class='pre'>controllerId</span> )<span class=\"signature\"><span class='private' >private</span></span></div><div class='description'><div class='short'>Removes all of a controller's attached listeners. ...</div><div class='long'><p>Removes all of a controller's attached listeners.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>controllerId</span> : <a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a><div class='sub-desc'><p>The id of the controller.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});